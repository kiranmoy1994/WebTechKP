{
  "_args": [
    [
      {
        "raw": "karma-coverage@github:douglasduteil/karma-coverage#next",
        "scope": null,
        "escapedName": "karma-coverage",
        "name": "karma-coverage",
        "rawSpec": "github:douglasduteil/karma-coverage#next",
        "spec": "github:douglasduteil/karma-coverage#next",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:douglasduteil/karma-coverage.git#next",
          "sshUrl": "git+ssh://git@github.com/douglasduteil/karma-coverage.git#next",
          "httpsUrl": "git+https://github.com/douglasduteil/karma-coverage.git#next",
          "gitUrl": "git://github.com/douglasduteil/karma-coverage.git#next",
          "shortcut": "github:douglasduteil/karma-coverage#next",
          "directUrl": "https://raw.githubusercontent.com/douglasduteil/karma-coverage/next/package.json"
        }
      },
      "L:\\Front_End_Project\\Bootstrap\\WebTechKP"
    ]
  ],
  "_from": "douglasduteil/karma-coverage#next",
  "_id": "karma-coverage@0.2.6",
  "_inCache": true,
  "_location": "/karma-coverage",
  "_phantomChildren": {
    "get-stdin": "4.0.1",
    "meow": "3.7.0",
    "sigmund": "1.0.1"
  },
  "_requested": {
    "raw": "karma-coverage@github:douglasduteil/karma-coverage#next",
    "scope": null,
    "escapedName": "karma-coverage",
    "name": "karma-coverage",
    "rawSpec": "github:douglasduteil/karma-coverage#next",
    "spec": "github:douglasduteil/karma-coverage#next",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:douglasduteil/karma-coverage.git#next",
      "sshUrl": "git+ssh://git@github.com/douglasduteil/karma-coverage.git#next",
      "httpsUrl": "git+https://github.com/douglasduteil/karma-coverage.git#next",
      "gitUrl": "git://github.com/douglasduteil/karma-coverage.git#next",
      "shortcut": "github:douglasduteil/karma-coverage#next",
      "directUrl": "https://raw.githubusercontent.com/douglasduteil/karma-coverage/next/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git://github.com/douglasduteil/karma-coverage.git#a2c924a883af5ff1aa9edb2164c54b6a801cdcf5",
  "_shasum": "8224d403bbb9ed01973826bcb162db310e122bba",
  "_shrinkwrap": null,
  "_spec": "karma-coverage@github:douglasduteil/karma-coverage#next",
  "_where": "L:\\Front_End_Project\\Bootstrap\\WebTechKP",
  "author": {
    "name": "SATO taichi",
    "email": "ryushi@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/karma-runner/karma-coverage/issues"
  },
  "contributors": [
    {
      "name": "Friedel Ziegelmayer",
      "email": "friedel.ziegelmayer@gmail.com"
    },
    {
      "name": "Allen Bierbaum",
      "email": "abierbaum@gmail.com"
    },
    {
      "name": "Ron Derksen",
      "email": "ron.derksen@informaat.nl"
    },
    {
      "name": "Julie",
      "email": "ju.ralph@gmail.com"
    },
    {
      "name": "Friedel Ziegelmayer",
      "email": "dignifiedquire@gmail.com"
    },
    {
      "name": "Petar Manev",
      "email": "petar.manev2010@gmail.com"
    }
  ],
  "dependencies": {
    "dateformat": "~1.0.6",
    "minimatch": "~0.3.0"
  },
  "description": "A Karma plugin. Generate code coverage.",
  "devDependencies": {
    "chai": "~1.7.2",
    "grunt": "~0.4.1",
    "grunt-auto-release": "~0.0.1",
    "grunt-bump": "~0.0.7",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-npm": "~0.0.2",
    "grunt-simple-mocha": "~0.4.0",
    "karma": "~0.12.0",
    "lodash": "^2.4.1",
    "mocks": "0.0.11",
    "sinon": "~1.7.3",
    "sinon-chai": "~2.4.0"
  },
  "gitHead": "a2c924a883af5ff1aa9edb2164c54b6a801cdcf5",
  "homepage": "https://github.com/karma-runner/karma-coverage#readme",
  "keywords": [
    "karma-plugin",
    "karma-preprocessor",
    "karma-reporter",
    "coverage",
    "istanbul"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "karma-coverage",
  "optionalDependencies": {},
  "peerDependencies": {
    "istanbul": "~0.3.0",
    "karma": ">=0.9"
  },
  "readme": "# karma-coverage [![Build Status](https://travis-ci.org/karma-runner/karma-coverage.svg?branch=master)](https://travis-ci.org/karma-runner/karma-coverage)\r\n\r\n> Generate code coverage using [Istanbul].\r\n\r\n## Installation\r\n\r\nThe easiest way is to keep `karma-coverage` as a devDependency in your `package.json`.\r\n```json\r\n{\r\n  \"devDependencies\": {\r\n    \"karma\": \"~0.10\",\r\n    \"karma-coverage\": \"~0.1\"\r\n  }\r\n}\r\n```\r\n\r\nYou can simple do it by:\r\n```bash\r\nnpm install karma-coverage --save-dev\r\n```\r\n\r\n## Configuration\r\nFollowing code shows the default configuration...\r\n```js\r\n// karma.conf.js\r\nmodule.exports = function(config) {\r\n  config.set({\r\n    files: [\r\n      'src/**/*.js',\r\n      'test/**/*.js'\r\n    ],\r\n\r\n    // coverage reporter generates the coverage\r\n    reporters: ['progress', 'coverage'],\r\n\r\n    preprocessors: {\r\n      // source files, that you wanna generate coverage for\r\n      // do not include tests or libraries\r\n      // (these files will be instrumented by Istanbul)\r\n      'src/*.js': ['coverage']\r\n    },\r\n\r\n    // optionally, configure the reporter\r\n    coverageReporter: {\r\n      type : 'html',\r\n      dir : 'coverage/'\r\n    }\r\n  });\r\n};\r\n```\r\n\r\nExample use with a CoffeeScript project...\r\n```js\r\n// karma.conf.js\r\nmodule.exports = function(config) {\r\n  config.set({\r\n    files: [\r\n      'src/**/*.coffee',\r\n      'test/**/*.coffee'\r\n    ],\r\n\r\n    // coverage reporter generates the coverage\r\n    reporters: ['progress', 'coverage'],\r\n\r\n    preprocessors: {\r\n      // source files, that you wanna generate coverage for\r\n      // do not include tests or libraries\r\n      // (these files will be instrumented by Istanbul via Ibrik unless\r\n      // specified otherwise in coverageReporter.instrumenter)\r\n      'src/*.coffee': ['coverage'],\r\n\r\n      // note: project files will already be converted to\r\n      // JavaScript via coverage preprocessor.\r\n      // Thus, you'll have to limit the CoffeeScript preprocessor\r\n      // to uncovered files.\r\n      'test/**/*.coffee': ['coffee']\r\n    },\r\n\r\n    // optionally, configure the reporter\r\n    coverageReporter: {\r\n      type : 'html',\r\n      dir : 'coverage/'\r\n    }\r\n  });\r\n};\r\n\r\n```\r\n\r\n### Options\r\n#### type\r\n**Type:** String\r\n\r\n**Possible Values:**\r\n  * `html` (default)\r\n  * `lcov` (lcov and html)\r\n  * `lcovonly`\r\n  * `text`\r\n  * `text-summary`\r\n  * `cobertura` (xml format supported by Jenkins)\r\n  * `teamcity` (code coverage System Messages for TeamCity)\r\n\r\nIf you set `type` to `text` or `text-summary`, you may set the `file` option, like this.\r\n```javascript\r\ncoverageReporter: {\r\n  type : 'text',\r\n  dir : 'coverage/',\r\n  file : 'coverage.txt'\r\n}\r\n```\r\nIf no filename is given, it will write the output to the console.\r\n\r\n#### dir\r\n**Type:** String\r\n\r\n**Description:** This will be used to output coverage reports. When\r\n  you set a relative path, the directory is resolved against the `basePath`.\r\n\r\n#### subdir\r\n**Type:** String\r\n\r\n**Description**: This will be used in complement of the `coverageReporter.dir`\r\noption to generate the full output directory path. By default, the output\r\ndirectory is set to `./config.dir/BROWSER_NAME/`, this option allows you to\r\ncustom the second part. You can either pass a string or a function which will be\r\ncalled with the `browser` passed as the only argument.\r\n\r\n```javascript\r\ncoverageReporter: {\r\n  dir: 'coverage',\r\n  subdir: '.'\r\n  // Would output the results into: .'/coverage/'\r\n}\r\n```\r\n\r\n```javascript\r\ncoverageReporter: {\r\n  dir: 'coverage',\r\n  subdir: 'report'\r\n  // Would output the results into: .'/coverage/report/'\r\n}\r\n```\r\n\r\n```javascript\r\ncoverageReporter: {\r\n  dir: 'coverage',\r\n  subdir: function(browser) {\r\n    // normalization process to keep a consistent browser name accross different\r\n    // OS\r\n    return browser.toLowerCase().split(/[ /-]/)[0];\r\n  }\r\n  // Would output the results into: './coverage/firefox/'\r\n}\r\n```\r\n\r\n#### multiple reporters\r\nYou can use multiple reporters, by providing array of options.\r\n\r\n```javascript\r\ncoverageReporter: {\r\n  reporters:[\r\n    {type: 'html', dir:'coverage/'},\r\n    {type: 'teamcity'},\r\n    {type: 'text-summary'}\r\n  ],\r\n}\r\n```\r\n\r\n#### instrumenter\r\nKarma-coverage can infers the instrumenter regarding of the file extension.\r\n  It is possible to override this behavior and point out an\r\n  instrumenter for the files matching a specific pattern.\r\n  To do so, you need to declare an object under with the keys representing the\r\n  pattern to match, and the instrumenter to apply. The matching will be done\r\n  using [minimatch](https://github.com/isaacs/minimatch).\r\n  If two patterns match, the last one will take the precedence.\r\n\r\nFor example you can use [Ibrik](https://github.com/Constellation/ibrik) (an\r\n  [Istanbul](https://github.com/gotwarlost/istanbul) analog for\r\n  CoffeeScript files) with:\r\n\r\n```javascript\r\ncoverageReporter: {\r\n  instrumenters: { ibrik : require('ibrik') }\r\n  instrumenter: {\r\n    '**/*.coffee': 'ibrik'\r\n  },\r\n  // ...\r\n}\r\n```\r\n\r\n----\r\n\r\nFor more information on Karma see the [homepage].\r\n\r\n\r\n[homepage]: http://karma-runner.github.com\r\n[Istanbul]: https://github.com/yahoo/istanbul\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/karma-runner/karma-coverage.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.2.6"
}
